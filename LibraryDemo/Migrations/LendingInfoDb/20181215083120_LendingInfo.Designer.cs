// <auto-generated />
using System;
using LibraryDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryDemo.Migrations.LendingInfoDb
{
    [DbContext(typeof(LendingInfoDbContext))]
    [Migration("20181215083120_LendingInfo")]
    partial class LendingInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.Book", b =>
                {
                    b.Property<string>("BarCode")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AppointedLatestTime");

                    b.Property<DateTime?>("BorrowTime");

                    b.Property<string>("FetchBookNumber");

                    b.Property<string>("ISBN");

                    b.Property<string>("KeeperId");

                    b.Property<DateTime?>("MatureTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("State");

                    b.HasKey("BarCode");

                    b.HasIndex("KeeperId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.BookDetails", b =>
                {
                    b.Property<string>("ISBN")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Press")
                        .IsRequired();

                    b.Property<DateTime>("PublishDateTime");

                    b.Property<string>("SoundCassettes");

                    b.Property<int>("Version");

                    b.HasKey("ISBN");

                    b.ToTable("BooksDetail");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.BookMiddle", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<int>("BookshelfId");

                    b.Property<int>("BookMiddleId");

                    b.HasKey("BookId", "BookshelfId");

                    b.HasIndex("BookshelfId");

                    b.ToTable("BookMiddles");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.Bookshelf", b =>
                {
                    b.Property<int>("BookshelfId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("MaxFetchNumber")
                        .IsRequired();

                    b.Property<string>("MinFetchNumber")
                        .IsRequired();

                    b.Property<string>("Sort")
                        .IsRequired();

                    b.HasKey("BookshelfId");

                    b.ToTable("Bookshelves");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.RecommendedBook", b =>
                {
                    b.Property<string>("ISBN")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Press")
                        .IsRequired();

                    b.Property<DateTime>("PublishDateTime");

                    b.Property<string>("SoundCassettes");

                    b.Property<int>("Version");

                    b.HasKey("ISBN");

                    b.ToTable("RecommendedBooks");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AppointingBookBarCode");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<int>("Degree");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<decimal>("Fine");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MaxBooksNumber");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.Book", b =>
                {
                    b.HasOne("LibraryDemo.Models.DomainModels.Student", "Keeper")
                        .WithMany("KeepingBooks")
                        .HasForeignKey("KeeperId");
                });

            modelBuilder.Entity("LibraryDemo.Models.DomainModels.BookMiddle", b =>
                {
                    b.HasOne("LibraryDemo.Models.DomainModels.Book", "Book")
                        .WithMany("BookMiddles")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibraryDemo.Models.DomainModels.Bookshelf", "Bookshelf")
                        .WithMany("BookMiddles")
                        .HasForeignKey("BookshelfId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
